{"version":3,"sources":["pages/Home.jsx","pages/Send.jsx","components/QR.jsx","pages/Receive.jsx","App.js","serviceWorker.js","index.js"],"names":["Home","history","navigator","serviceWorker","onmessage","event","console","log","window","_file","data","file","alert","push","to","Send","name","className","process","src","htmlFor","type","id","QR","string","canvasRef","useRef","useEffect","QRCode","toCanvas","current","ref","Receive","App","path","exact","component","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.89456087.chunk.js","sourcesContent":["import React from 'react'\nimport { Link } from 'react-router-dom'\n\nexport default function Home({history}) {\n\n    if (navigator.serviceWorker) {\n        navigator.serviceWorker.onmessage = (event) => {\n          console.log(event);\n          // no global state for now\n          window._file = event.data.file;\n          alert(\"got message\");\n          history.push('/send')\n        };\n      }\n\n    return (\n        <div>\n            <Link to=\"/send\">Enviar arquivo</Link>\n            <Link to=\"/receive\">Receber um arquivo</Link>\n        </div>\n    )\n}\n","import React from 'react'\n\nexport default function Send() {\n    const file = window._file || {name: 'nenhum arquivo'};\n\n    return (\n        <div>\n            send page.\n            <header>\n            pronto pra enviar {file.name}\n            </header>\n            <div className=\"\">acessa {process.env.PUBLIC_URL} no outro dispositivo</div>\n\n            <video src=\"\" className=\"camera\"></video>\n\n            <div className=\"typecode\">\n                <label htmlFor=\"code\">ou digite o código</label>\n                <input type=\"text\" id=\"code\"/>\n            </div>\n\n        </div>\n    )\n}\n","import React from 'react';\nimport QRCode from 'qrcode';\nimport { useRef } from 'react';\nimport { useEffect } from 'react';\n\nexport default function QR({string}) {\n    const canvasRef = useRef(null);\n    \n    useEffect(() => {\n        QRCode.toCanvas(canvasRef.current, string)\n    }, [string])\n\n    return (\n        <div>\n            <canvas ref={canvasRef}/>\n        </div>\n    )\n}\n","import React from 'react'\nimport QR from '../components/QR'\n\nexport default function Receive() {\n    return (\n        <div>\n            escaneia esse QR aqui pra conectar.\n            ou digita o código no outro dispositivo.\n            <QR string=\"teste\" />\n        </div>\n    )\n}\n","import React from \"react\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport Home from \"./pages/Home\";\nimport Send from \"./pages/Send\";\nimport Receive from \"./pages/Receive\";\nimport \"./App.css\";\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <BrowserRouter>\n        <Switch>\n          <Route path=\"/\" exact component={Home}/>\n          <Route path=\"/send\" component={Send} />\n          <Route path=\"/receive\" component={Receive} />\n          {/* driblando o 404 */}\n          <Route component={Home}/>\n        </Switch>\n      </BrowserRouter>\n      <p>build 3, we're testin'</p>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}